apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.configmaps.internal.scripts.name }}"
  labels:
    app: rook-ceph-cluster-config
data:

  rook-ceph-cluster-config-exporter.sh: |
    #!/usr/bin/env bash
    # rook-ceph-cluster-config-exporter.sh

    set -ex

    CEPH_MON_SERVICE_NAMESPACE="{{ .Values.cephMonitorService.namespace }}"
    CEPH_MON_SERVICE_NAME="{{ .Values.cephMonitorService.name }}"
    DESTINATION_CONFIGMAP_NAME="{{ .Values.configmaps.output.cephConfiguration.name }}"
    CEPH_CONF='
{{ .Values.cephClusterConfiguration | nindent 4 }}
    # eof
    '

{{ include "rook-ceph-cluster-config.snippets.mon_host_from_k8s_ep" . | nindent 4 }}

    if [[ "${CEPH_CONF}" =~ \<mon-hosts\> ]]; then
      # ceph monitor expansion
      ceph_mon_hosts=$(mon_host_from_k8s_ep "${CEPH_MON_SERVICE_NAMESPACE}" "${CEPH_MON_SERVICE_NAME}")
      CEPH_CONF="$(echo "${CEPH_CONF}" | sed "s|<mon-hosts>|${ceph_mon_hosts}|g")"
    fi
    # apply the configmap (create/modify)
    kubectl create cm "${DESTINATION_CONFIGMAP_NAME}" --from-literal "ceph.conf=${CEPH_CONF}" -o yaml --dry-run=client | \
      kubectl apply -f -

    kubectl get configmap "${DESTINATION_CONFIGMAP_NAME}" -o yaml

    echo ".done"

  rook-ceph-cluster-config-cleanup.sh: |
    #!/bin/bash
    # rook-ceph-cluster-config-cleanup.sh

    DESTINATION_CONFIGMAP_NAME="{{ .Values.configmaps.output.cephConfiguration.name }}"

    set -ex

    kubectl delete configmap --ignore-not-found=true "${DESTINATION_CONFIGMAP_NAME}"

    echo ".done"
