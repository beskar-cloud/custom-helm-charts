{{- if .Values.cloudkeeper_os.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: &name {{ .Values.name }}-cloudkeeper-os
  labels:
    app.kubernetes.io/name: *name
spec:
  replicas: {{ .Values.cloudkeeper_os.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: *name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *name
    spec:
      serviceAccountName: {{ .Values.name }}-auto-config
      volumes:
        - name: config
          configMap:
            name: {{ .Values.name }}-etc
        - name: bin
          configMap:
            name: {{ .Values.name }}-bin
            defaultMode: 0755
        - name: auto-config
          configMap:
            name: {{ .Values.name }}-auto-config
            optional: true
        - name: images
          persistentVolumeClaim:
            claimName: {{ .Values.name }}
      containers:
        - name: cloudkeeper-os
          image: {{ .Values.cloudkeeper_os.image }}:{{ .Values.cloudkeeper_os.tag }}
          ports:
          - name: grpc
            containerPort: 50051
          volumeMounts:
            - name: config
              mountPath: /etc/cloudkeeper-os/cloudkeeper-os.conf
              subPath: cloudkeeper-os.conf
              readOnly: true
            - name: auto-config
              mountPath: /etc/cloudkeeper-os/mapping.json
              subPath: mapping.json
              readOnly: true
            - name: images
              mountPath: /var/spool/cloudkeeper/images
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ .Values.name }}-cloudkeeper-os
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: transcribe-mapping
          image: registry.gitlab.ics.muni.cz:443/cloud/g2/container-registry/docker.io__ubuntu:jammy
          command: ["/tmp/init.sh"]
          volumeMounts:
            - name: bin
              mountPath: /tmp/init.sh
              subPath: init.sh
              readOnly: true
            - name: bin
              mountPath: /tmp/transcribe-mapping.py
              subPath: transcribe-mapping.py
              readOnly: true
          env:
          - name: OS_AUTH_URL
            value: {{ .Values.cloudkeeper_os.config.keystone_authtoken.auth_url | quote }}
          - name: OS_USERNAME
            value: {{ .Values.cloudkeeper_os.config.keystone_authtoken.username | quote }}
          - name: OS_PASSWORD
{{- if .Values.cloudkeeper.enabled }}
            valueFrom:
              secretKeyRef:
                key: cloudkeeper_user_password
                name: {{ .Values.name }}-cloudkeeper-user
{{- else }}
            value: {{ .Values.cloudkeeper_os.config.keystone_authtoken.password | quote }}
{{- end }}

{{- if .Values.cloudkeeper_os.config.keystone_authtoken.project_domain_name }}
          - name: OS_PROJECT_DOMAIN_NAME
            value: {{ .Values.cloudkeeper_os.config.keystone_authtoken.project_domain_name | quote }}
{{- end }}
{{- if .Values.cloudkeeper_os.config.keystone_authtoken.project_domain_name }}
          - name: OS_USER_DOMAIN_NAME
            value: {{ .Values.cloudkeeper_os.config.keystone_authtoken.user_domain_name | quote }}
{{- end }}
{{- if .Values.cloudkeeper_os.config.keystone_authtoken.project_name }}
          - name: OS_PROJECT_NAME
            value: {{ .Values.cloudkeeper_os.config.keystone_authtoken.project_name | quote }}
{{- end }}
{{- end }}
